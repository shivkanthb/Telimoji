var _ = require('lodash'),
    ImojiClient = require("./lib/client"),
    ImojiConstants = require("./lib/constants");

/**
 * Creates an Imoji server request object
 * @constructor
 * @param {String} [options.apiKey] API Key from developer.imoji.io
 * @param {String} [options.apiSecret] API Secret Token
 * @param {String} [options.apiVersion] Optional: Specified API version to use
 */
var Request = function (options) {
    this._client = new ImojiClient(
        options.apiKey,
        options.apiSecret,
        options.apiVersion || ImojiConstants.APIVersion
    );
};

_.extend(Request.prototype, {
    /**
     * Fetches popular Imoji images from the database in randomized order
     * @param {Boolean} [options.numResults] Number of results to grab, maximum of 100
     * @return Promise object with success value containing 0 or more image results
     */
    featured: function (options) {
        return this._client.getCall(ImojiConstants.Endpoints.Featured, options);
    },

    /**
     * Fetches sticker content grouped into categories. Each category contains a searchText property that can be sent to the search endpoint.
     * @param {String} [options.classification] Optional: Either generic or trending
     * @return Promise object with success value containing imoji categories
     */
    categories: function (options) {
        return this._client.getCall(ImojiConstants.Endpoints.Categories, options);
    },

    /**
     * Performs a search of the Imoji database using keywords or with full sentences.
     * @param {String} [options.query] Required: String to search with
     * @param {String} [options.sentence] Optional: A full sentence to search with. When supplied, query is not required.
     * @param {String} [options.locale] Optional: Locale in the following formats en-US or en_US (case insensitive)
     * @param {Number} [options.limit] Optional: Number of results to grab, maximum of 100
     * @param {Number} [options.offset] Optional: Used for pagination to fetch the next n results starting from the offset
     * @return Promise object with success value containing 0 or more image results
     */
    search: function (options) {
        return this._client.getCall(ImojiConstants.Endpoints.Search, options);
    },

    /**
     * Resolves information for Imoji stickers using their ID's
     * @param {String} [options.ids] Required: Comma delimited list of imoji id's (ex: ffd0caa4-a535-4447-9246-2ed025308f1b,c8a8da15-4fab-44a6-9e5f-1cfc390f60ed)
     * @return Promise object with success value containing 0 or more image results
     */
    fetchByIds: function (options) {
        return this._client.postCall(ImojiConstants.Endpoints.FetchByIds, options);
    },

    /**
     * Marks an Imoji sticker as being used for sharing. For example, if a user copied a sticker in a keyboard application, that would qualify as the sticker being used.
     * Marking a sticker as used does 2 things. It improves the quality of the search results for the clients and also adds the content to the users recents list. For apps looking to keep track of which stickers a user has interacted with, this endpoint should be called.
     * @param {String} [options.imojiId] Required: ID of Imoji sticker to mark.
     * @param {String} [options.originIdentifier] Optional: Arbitrary identifier which developers can supply describing the action that triggered the usage. Must be less than or equal to 40 characters.   
     * @return Promise object with success or error value
     */
    markUsage: function (options) {
        return this._client.getCall(ImojiConstants.Endpoints.MarkImojiUsage, options);
    },

    /**
     * Reports an Imoji sticker as abusive. You may expose this method in your application in order for users to have the ability to flag content as not appropriate. Reported Imojis are not removed instantly but are reviewed internally before removal.
     * @param {String} [options.imojiId] Required: ID of Imoji sticker to report. 
     * @param {String} [options.reason] Optional: Text describing the reason why the content is being reported.
     * @return Promise object with success or error value
     */
    reportAbusive: function (options) {
        return this._client.postCall(ImojiConstants.Endpoints.ReportAbuse, options);
    },

    /**
     * Adds an imoji sticker to a sessions favorites list.
     * @param {String} [options.imojiId] Required: ID of Imoji sticker to add to the favorites list.
     * @return Promise object with success or error value
     */
    saveToFavorites: function (options) {
        return this._client.postCall(ImojiConstants.Endpoints.SaveToFavorites, options);
    },

    /**
     * Gets Imoji stickers associated to a user's collection which can be accumulated by calling either Saving to favorites or Mark Usage
     * @param {String} [options.collectionType] Required: Either recents, created, or liked (Saved to favorites). Created stickers are ones uploaded from iOS and Android SDK's using the Sticker creator functionality.
     * @return Promise object with success value containing 0 or more image results
     */
    fetchCollection: function (options) {
        return this._client.getCall(ImojiConstants.Endpoints.FetchCollection, options);
    }
});

module.exports = Request;
